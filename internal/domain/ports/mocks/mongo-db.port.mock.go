// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Moreira-Henrique-Pedro/entregador/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// ResidentRepositoryPort is an autogenerated mock type for the ResidentRepositoryPort type
type ResidentRepositoryPort struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, resident
func (_m *ResidentRepositoryPort) Create(ctx context.Context, resident *entities.Resident) error {
	ret := _m.Called(ctx, resident)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resident) error); ok {
		r0 = rf(ctx, resident)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, apartamento
func (_m *ResidentRepositoryPort) Delete(ctx context.Context, apartamento string) error {
	ret := _m.Called(ctx, apartamento)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, apartamento)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByApartment provides a mock function with given fields: ctx, apartamento
func (_m *ResidentRepositoryPort) GetByApartment(ctx context.Context, apartamento string) (*entities.Resident, error) {
	ret := _m.Called(ctx, apartamento)

	var r0 *entities.Resident
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Resident); ok {
		r0 = rf(ctx, apartamento)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Resident)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, apartamento)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, resident
func (_m *ResidentRepositoryPort) Update(ctx context.Context, resident *entities.Resident) error {
	ret := _m.Called(ctx, resident)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resident) error); ok {
		r0 = rf(ctx, resident)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResidentRepositoryPort interface {
	mock.TestingT
	Cleanup(func())
}

// NewResidentRepositoryPort creates a new instance of ResidentRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResidentRepositoryPort(t mockConstructorTestingTNewResidentRepositoryPort) *ResidentRepositoryPort {
	mock := &ResidentRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
