// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Moreira-Henrique-Pedro/entregador/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryRepositoryPort is an autogenerated mock type for the DeliveryRepositoryPort type
type DeliveryRepositoryPort struct {
	mock.Mock
}

// CreateDelivery provides a mock function with given fields: ctx, delivery
func (_m *DeliveryRepositoryPort) CreateDelivery(ctx context.Context, delivery *entities.Delivery) (*entities.Delivery, error) {
	ret := _m.Called(ctx, delivery)

	var r0 *entities.Delivery
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Delivery) *entities.Delivery); ok {
		r0 = rf(ctx, delivery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.Delivery) error); ok {
		r1 = rf(ctx, delivery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryByID provides a mock function with given fields: ctx, id
func (_m *DeliveryRepositoryPort) DeleteDeliveryByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeliveryByID provides a mock function with given fields: ctx, id
func (_m *DeliveryRepositoryPort) GetDeliveryByID(ctx context.Context, id string) (*entities.Delivery, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Delivery
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Delivery); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDelivery provides a mock function with given fields: ctx, delivery
func (_m *DeliveryRepositoryPort) UpdateDelivery(ctx context.Context, delivery *entities.Delivery) error {
	ret := _m.Called(ctx, delivery)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Delivery) error); ok {
		r0 = rf(ctx, delivery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDeliveryRepositoryPort interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryRepositoryPort creates a new instance of DeliveryRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryRepositoryPort(t mockConstructorTestingTNewDeliveryRepositoryPort) *DeliveryRepositoryPort {
	mock := &DeliveryRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
